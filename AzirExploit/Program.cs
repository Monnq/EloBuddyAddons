using System;
using System.Linq;
using EloBuddy;
using EloBuddy.SDK;
using EloBuddy.SDK.Events;
using EloBuddy.SDK.Menu.Values;
using EloBuddy.SDK.Rendering;
using SharpDX;


namespace AzirExploit
{
    class Program
    {                
        public static Text ExploitStatus;
        
        static void Main(string[] args)
        {
            Loading.OnLoadingComplete += LoadingComplete;
            Obj_AI_Base.OnProcessSpellCast += OnProcessSpellCast;
            Drawing.OnDraw += OnDraw;
        }

        private static void LoadingComplete(EventArgs args)
        {
            Game.OnTick += Game_OnTick;
        }

        public static void DrawStatus(string msg, Vector3 Hero, System.Drawing.Color color, int weight = 0)
        {
            var wts = Drawing.WorldToScreen(Hero);
            Drawing.DrawText(wts[0] - (msg.Length) * 5, wts[1] + weight, color, msg);
        }

        private static void OnDraw(EventArgs args)
        {
            DrawStatus("Exploit is enabled", Player.Instance.Position, System.Drawing.Color.Chartreuse, 15);
        }



        private static void Game_OnTick(EventArgs args)
        {
            if (!Orbwalker.ActiveModesFlags.HasFlag(Orbwalker.ActiveModes.Combo))
                return;

            var soldiers = ObjectManager.Get<GameObject>().Where(x => x.Name == "AzirSoldier").ToList();

            if (soldiers.Any())
            {
                foreach (var gameObject in soldiers.Where(gameObject => EntityManager.Heroes.Enemies.Any(x => gameObject.IsInRange(x, 800))))
                {
                    foreach (var enemy in EntityManager.Heroes.Enemies.Where(x => gameObject.IsInRange(x, 800)))
                    {
                        Player.Instance.Spellbook.CastSpell(SpellSlot.Q, enemy.Position);
                    }
                }
            }
        }
        
        public static CheckBox _useExploit;
        public static bool UseExploit
        {
            get { return _useExploit.CurrentValue; }
        }

        private static void OnProcessSpellCast(Obj_AI_Base sender, GameObjectProcessSpellCastEventArgs args)
        {
            if (!sender.IsMe)
            {
                return;
            }

            if (args.Slot == SpellSlot.W)
            {
                var enemy = TargetSelector.GetTarget(825, DamageType.Magical);
                if (enemy != null)
                {
                    Player.Instance.Spellbook.CastSpell(SpellSlot.Q, enemy.Position);
                }
            }
        }

        
    }
}
