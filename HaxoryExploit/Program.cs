using System;
using EloBuddy;
using EloBuddy.SDK;
using EloBuddy.SDK.Events;
using EloBuddy.SDK.Menu;
using EloBuddy.SDK.Menu.Values;

namespace HaxoryExploit
{
    class Program
    {
        static void Main(string[] args)
        {
            Loading.OnLoadingComplete += GameLoadingComplete;
            Console.WriteLine("Haxory Exploits loaded successfully :^)");
        }

        private static CheckBox _useExploit;

        public static bool UseExploit
        {
            get { return _useExploit.CurrentValue; }
        }

        private static void GameLoadingComplete(EventArgs args)
        {
            var mainmenu = MainMenu.AddMenu("HaxoryExploits", "haxoryexploits");
            var settingsmenu = mainmenu.AddSubMenu("Settings");
            _useExploit = settingsmenu.Add("UseExploit", new CheckBox("Enable exploits", false));

            Obj_AI_Base.OnProcessSpellCast += OnProcessSpellCast;

        }

        private static void OnProcessSpellCast(Obj_AI_Base sender, GameObjectProcessSpellCastEventArgs args)
        {
            if (!sender.IsMe)
            {
                return;
            }

            if (ObjectManager.Player.ChampionName == "Graves" && args.SData.Name.ToLower().Contains("attack")
                && UseExploit)
            {
                ObjectManager.Player.Spellbook.CastSpell(SpellSlot.E, Game.CursorPos, true);
            }

            if (UseExploit == false)
            {
                return;
            }

            if ((ObjectManager.Player.ChampionName == "Azir"))
            {
                {
                    if (UseExploit)
                    {                        
                            if (args.SData.Name == ObjectManager.Player.Spellbook.GetSpell(SpellSlot.W).SData.Name
                                || args.SData.Name.ToLower().Contains("attack"))
                            {
                                var enemy = TargetSelector.GetTarget(825, DamageType.Magical);
                                if (enemy != null)
                                {
                                    ObjectManager.Player.Spellbook.CastSpell(SpellSlot.Q, enemy.Position, true);
                                }
                            }

                        
                        else
                        {
                            if (args.SData.Name == ObjectManager.Player.Spellbook.GetSpell(SpellSlot.W).SData.Name)
                            {
                                var enemy = TargetSelector.GetTarget(825, DamageType.Magical);
                                if (enemy != null)
                                {
                                    ObjectManager.Player.Spellbook.CastSpell(SpellSlot.Q, enemy.Position, true);
                                }
                            }
                        }
                    }
                    else
                    {
                        return;
                    }


                }

            }
        }
    }
}

